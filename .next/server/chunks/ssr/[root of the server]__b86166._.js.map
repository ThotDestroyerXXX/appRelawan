{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/app/Components/post.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LatestPost = registerClientReference(\n    function() { throw new Error(\"Attempted to call LatestPost() from the server but LatestPost is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/Components/post.tsx <module evaluation>\",\n    \"LatestPost\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,0VAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,6DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/app/Components/post.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LatestPost = registerClientReference(\n    function() { throw new Error(\"Attempted to call LatestPost() from the server but LatestPost is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/Components/post.tsx\",\n    \"LatestPost\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,0VAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,yCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,qRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,qLAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/db/schema.ts"],"sourcesContent":["// Example model schema from the Drizzle docs\n// https://orm.drizzle.team/docs/sql-schema-declaration\n\nimport { sql } from \"drizzle-orm\";\nimport {\n  index,\n  integer,\n  pgTableCreator,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\";\n\n/**\n * This is an example of how to use the multi-project schema feature of Drizzle ORM. Use the same\n * database instance for multiple projects.\n *\n * @see https://orm.drizzle.team/docs/goodies#multi-project-schema\n */\nexport const createTable = pgTableCreator((name) => `app_relawan_${name}`);\n\nexport const posts = createTable(\n  \"post\",\n  {\n    id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n    name: varchar(\"name\", { length: 256 }),\n    createdAt: timestamp(\"created_at\", { withTimezone: true })\n      .default(sql`CURRENT_TIMESTAMP`)\n      .notNull(),\n    updatedAt: timestamp(\"updated_at\", { withTimezone: true }).$onUpdate(\n      () => new Date()\n    ),\n  },\n  (example) => ({\n    nameIndex: index(\"name_idx\").on(example.name),\n  })\n);\n"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,uDAAuD;;;;;AAGvD;AAAA;AAAA;AAAA;AADA;AACA;;;AAcO,MAAM,cAAc,CAAA,GAAA,mSAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,OAAS,CAAC,YAAY,EAAE,MAAM;AAElE,MAAM,QAAQ,YACnB,QACA;IACE,IAAI,CAAA,GAAA,gTAAA,CAAA,UAAO,AAAD,EAAE,MAAM,UAAU,GAAG,4BAA4B;IAC3D,MAAM,CAAA,GAAA,gTAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAI;IACpC,WAAW,CAAA,GAAA,kTAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GACrD,OAAO,CAAC,0RAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,EAC9B,OAAO;IACV,WAAW,CAAA,GAAA,kTAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,SAAS,CAClE,IAAM,IAAI;AAEd,GACA,CAAC,UAAY,CAAC;QACZ,WAAW,CAAA,GAAA,qSAAA,CAAA,QAAK,AAAD,EAAE,YAAY,EAAE,CAAC,QAAQ,IAAI;IAC9C,CAAC"}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\n\nimport { env } from \"~/env\";\nimport * as schema from \"./schema\";\n\n/**\n * Cache the database connection in development. This avoids creating a new connection on every HMR\n * update.\n */\nconst globalForDb = globalThis as unknown as {\n  conn: postgres.Sql | undefined;\n};\n\nconst conn = globalForDb.conn ?? postgres(env.DATABASE_URL, { prepare: false });\nif (env.NODE_ENV !== \"production\") globalForDb.conn = conn;\n\nexport const db = drizzle(conn, { schema });\n"],"names":[],"mappings":";;;AACA;AAEA;AACA;AAJA;;;;;AAMA;;;CAGC,GACD,MAAM,cAAc;AAIpB,MAAM,OAAO,YAAY,IAAI,IAAI,CAAA,GAAA,6LAAA,CAAA,UAAQ,AAAD,EAAE,0GAAA,CAAA,MAAG,CAAC,YAAY,EAAE;IAAE,SAAS;AAAM;AAC7E,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,YAAY,IAAI,GAAG;AAE/C,MAAM,KAAK,CAAA,GAAA,wSAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;AACD;AACA;AAGA;AAJA;AAEA;;;;;AAgBO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,IAAA,4HAAA,CAAA,KAAE;QACF,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,qSAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,gMAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,qLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { posts } from \"~/server/db/schema\";\n\nexport const postRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1) }))\n    .mutation(async ({ ctx, input }) => {\n      await ctx.db.insert(posts).values({\n        name: input.name,\n      });\n    }),\n\n  getLatest: publicProcedure.query(async ({ ctx }) => {\n    const post = await ctx.db.query.posts.findFirst({\n      orderBy: (posts, { desc }) => [desc(posts.createdAt)],\n    });\n\n    return post ?? null;\n  }),\n});\n"],"names":[],"mappings":";;;AAEA;AACA;AAHA;;;;AAKO,MAAM,aAAa,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,OAAO,4HAAA,CAAA,kBAAe,CACnB,KAAK,CAAC,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,4HAAA,CAAA,kBAAe,CACpB,KAAK,CAAC,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,6HAAA,CAAA,QAAK,EAAE,MAAM,CAAC;YAChC,MAAM,MAAM,IAAI;QAClB;IACF;IAEF,WAAW,4HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC7C,MAAM,OAAO,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;YAC9C,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,GAAK;oBAAC,KAAK,MAAM,SAAS;iBAAE;QACvD;QAEA,OAAO,QAAQ;IACjB;AACF"}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/api/routers/user.ts"],"sourcesContent":["import { z } from \"zod\";\r\n\r\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\r\n\r\nexport const userRouter = createTRPCRouter({\r\n  signUp: publicProcedure\r\n    .input(\r\n      z.object({\r\n        username: z\r\n          .string()\r\n          .min(1, \"Username must be at least 1 character long\")\r\n          .max(50, \"Username must be at most 50 characters long\"),\r\n        email: z.string().email(\"Invalid email\"),\r\n        password: z\r\n          .string()\r\n          .min(8, \"Password must be at least 8 characters long\")\r\n          .max(50, \"Password must be at most 50 characters long\"),\r\n      }),\r\n    )\r\n    .mutation(async ({ input, ctx }) => {\r\n      // Your mutation logic here\r\n      return { success: true };\r\n    }),\r\n});\r\n"],"names":[],"mappings":";;;AAEA;AAFA;;;AAIO,MAAM,aAAa,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,QAAQ,4HAAA,CAAA,kBAAe,CACpB,KAAK,CACJ,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,UAAU,qLAAA,CAAA,IAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG,8CACP,GAAG,CAAC,IAAI;QACX,OAAO,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QACxB,UAAU,qLAAA,CAAA,IAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG,+CACP,GAAG,CAAC,IAAI;IACb,IAED,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE;QAC7B,2BAA2B;QAC3B,OAAO;YAAE,SAAS;QAAK;IACzB;AACJ"}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/api/root.ts"],"sourcesContent":["import { postRouter } from \"~/server/api/routers/post\";\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\nimport { userRouter } from \"./routers/user\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  post: postRouter,\n  user: userRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAOO,MAAM,YAAY,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,uIAAA,CAAA,aAAU;IAChB,MAAM,uIAAA,CAAA,aAAU;AAClB;AAYO,MAAM,eAAe,CAAA,GAAA,4HAAA,CAAA,sBAAmB,AAAD,EAAE"}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/trpc/query-client.ts"],"sourcesContent":["import {\n  defaultShouldDehydrateQuery,\n  QueryClient,\n} from \"@tanstack/react-query\";\nimport SuperJSON from \"superjson\";\n\nexport const createQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        // With SSR, we usually want to set some default staleTime\n        // above 0 to avoid refetching immediately on the client\n        staleTime: 30 * 1000,\n      },\n      dehydrate: {\n        serializeData: SuperJSON.serialize,\n        shouldDehydrateQuery: (query) =>\n          defaultShouldDehydrateQuery(query) ||\n          query.state.status === \"pending\",\n      },\n      hydrate: {\n        deserializeData: SuperJSON.deserialize,\n      },\n    },\n  });\n"],"names":[],"mappings":";;;AAIA;AAJA;AAAA;;;AAMO,MAAM,oBAAoB,IAC/B,IAAI,sPAAA,CAAA,cAAW,CAAC;QACd,gBAAgB;YACd,SAAS;gBACP,0DAA0D;gBAC1D,wDAAwD;gBACxD,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,gMAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,oPAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;gBACP,iBAAiB,gMAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/trpc/server.ts"],"sourcesContent":["import \"server-only\";\n\nimport { createHydrationHelpers } from \"@trpc/react-query/rsc\";\nimport { headers } from \"next/headers\";\nimport { cache } from \"react\";\n\nimport { createCaller, type AppRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\nimport { createQueryClient } from \"./query-client\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a tRPC call from a React Server Component.\n */\nconst createContext = cache(async () => {\n  const heads = new Headers(await headers());\n  heads.set(\"x-trpc-source\", \"rsc\");\n\n  return createTRPCContext({\n    headers: heads,\n  });\n});\n\nconst getQueryClient = cache(createQueryClient);\nconst caller = createCaller(createContext);\n\nexport const { trpc: api, HydrateClient } = createHydrationHelpers<AppRouter>(\n  caller,\n  getQueryClient\n);\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,0SAAA,CAAA,QAAK,AAAD,EAAE;IAC1B,MAAM,QAAQ,IAAI,QAAQ,MAAM,CAAA,GAAA,oOAAA,CAAA,UAAO,AAAD;IACtC,MAAM,GAAG,CAAC,iBAAiB;IAE3B,OAAO,CAAA,GAAA,4HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS;IACX;AACF;AAEA,MAAM,iBAAiB,CAAA,GAAA,0SAAA,CAAA,QAAK,AAAD,EAAE,8HAAA,CAAA,oBAAiB;AAC9C,MAAM,SAAS,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD,EAAE;AAErB,MAAM,EAAE,MAAM,GAAG,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,8WAAA,CAAA,yBAAsB,AAAD,EAC/D,QACA"}},
    {"offset": {"line": 429, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/app/page.tsx"],"sourcesContent":["import Link from \"next/link\";\n\nimport { LatestPost } from \"~/app/Components/post\";\nimport { api, HydrateClient } from \"~/trpc/server\";\n\nexport default async function Home() {\n  const hello = await api.post.hello({ text: \"from tRPC\" });\n\n  void api.post.getLatest.prefetch();\n\n  return (\n    <HydrateClient>\n      <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white\">\n        <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16\">\n          <h1 className=\"text-5xl font-extrabold tracking-tight sm:text-[5rem]\">\n            Create <span className=\"text-[hsl(280,100%,70%)]\">T3</span> App\n          </h1>\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8\">\n            <Link\n              className=\"flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 hover:bg-white/20\"\n              href=\"https://create.t3.gg/en/usage/first-steps\"\n              target=\"_blank\"\n            >\n              <h3 className=\"text-2xl font-bold\">First Steps →</h3>\n              <div className=\"text-lg\">\n                Just the basics - Everything you need to know to set up your\n                database and authentication.\n              </div>\n            </Link>\n            <Link\n              className=\"flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 hover:bg-white/20\"\n              href=\"https://create.t3.gg/en/introduction\"\n              target=\"_blank\"\n            >\n              <h3 className=\"text-2xl font-bold\">Documentation →</h3>\n              <div className=\"text-lg\">\n                Learn more about Create T3 App, the libraries it uses, and how\n                to deploy it.\n              </div>\n            </Link>\n          </div>\n          <div className=\"flex flex-col items-center gap-2\">\n            <p className=\"text-2xl text-white\">\n              {hello ? hello.greeting : \"Loading tRPC query...\"}\n            </p>\n          </div>\n\n          <LatestPost />\n        </div>\n      </main>\n    </HydrateClient>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,QAAQ,MAAM,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QAAE,MAAM;IAAY;IAEvD,KAAK,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ;IAEhC,qBACE,mVAAC,qHAAA,CAAA,gBAAa;kBACZ,cAAA,mVAAC;YAAK,WAAU;sBACd,cAAA,mVAAC;gBAAI,WAAU;;kCACb,mVAAC;wBAAG,WAAU;;4BAAwD;0CAC7D,mVAAC;gCAAK,WAAU;0CAA2B;;;;;;4BAAS;;;;;;;kCAE7D,mVAAC;wBAAI,WAAU;;0CACb,mVAAC,iQAAA,CAAA,UAAI;gCACH,WAAU;gCACV,MAAK;gCACL,QAAO;;kDAEP,mVAAC;wCAAG,WAAU;kDAAqB;;;;;;kDACnC,mVAAC;wCAAI,WAAU;kDAAU;;;;;;;;;;;;0CAK3B,mVAAC,iQAAA,CAAA,UAAI;gCACH,WAAU;gCACV,MAAK;gCACL,QAAO;;kDAEP,mVAAC;wCAAG,WAAU;kDAAqB;;;;;;kDACnC,mVAAC;wCAAI,WAAU;kDAAU;;;;;;;;;;;;;;;;;;kCAM7B,mVAAC;wBAAI,WAAU;kCACb,cAAA,mVAAC;4BAAE,WAAU;sCACV,QAAQ,MAAM,QAAQ,GAAG;;;;;;;;;;;kCAI9B,mVAAC,iIAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;;;;;AAKrB"}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 589, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}