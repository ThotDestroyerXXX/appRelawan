{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,uRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,uLAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/db/schema.ts"],"sourcesContent":["// Example model schema from the Drizzle docs\n// https://orm.drizzle.team/docs/sql-schema-declaration\n\nimport { sql } from \"drizzle-orm\";\nimport {\n  index,\n  integer,\n  pgTableCreator,\n  timestamp,\n  uuid,\n  varchar,\n  text,\n  boolean,\n} from \"drizzle-orm/pg-core\";\n\nexport const createTable = pgTableCreator((name) => `${name}`);\n\nexport const posts = createTable(\n  \"post\",\n  {\n    id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n    name: varchar(\"name\", { length: 256 }),\n    createdAt: timestamp(\"created_at\", { withTimezone: true })\n      .default(sql`CURRENT_TIMESTAMP`)\n      .notNull(),\n    updatedAt: timestamp(\"updated_at\", { withTimezone: true }).$onUpdate(\n      () => new Date(),\n    ),\n  },\n  (example) => ({\n    nameIndex: index(\"name_idx\").on(example.name),\n  }),\n);\n\nexport const MsUser = createTable(\"MsUser\", {\n  UserId: uuid(\"UserId\").primaryKey(),\n  Email: varchar(\"Email\", { length: 50 }).notNull().unique(),\n  Username: varchar(\"Username\", { length: 25 }).notNull().unique(),\n  Password: varchar(\"Password\", { length: 50 }).notNull(),\n});\n\nexport const user = createTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const session = createTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id),\n});\n\nexport const account = createTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const verification = createTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/server/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\n\nimport { env } from \"~/env\";\nimport * as schema from \"./schema\";\n\n/**\n * Cache the database connection in development. This avoids creating a new connection on every HMR\n * update.\n */\nconst globalForDb = globalThis as unknown as {\n  conn: postgres.Sql | undefined;\n};\n\nconst conn = globalForDb.conn ?? postgres(env.DATABASE_URL, { prepare: false });\nif (env.NODE_ENV !== \"production\") globalForDb.conn = conn;\n\nexport const db = drizzle(conn, { schema });\n"],"names":[],"mappings":";;;AACA;AAEA;AACA;AAJA;;;;;AAMA;;;CAGC,GACD,MAAM,cAAc;AAIpB,MAAM,OAAO,YAAY,IAAI,IAAI,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE,4GAAA,CAAA,MAAG,CAAC,YAAY,EAAE;IAAE,SAAS;AAAM;AAC7E,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,YAAY,IAAI,GAAG;AAE/C,MAAM,KAAK,CAAA,GAAA,8VAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO"}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\r\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\r\nimport { db } from \"~/server/db\"; // your drizzle instance\r\n\r\nexport const auth = betterAuth({\r\n  emailAndPassword: {\r\n    enabled: true,\r\n  },\r\n  database: drizzleAdapter(db, {\r\n    provider: \"pg\", // or \"mysql\", \"sqlite\"\r\n  }),\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA,wNAAkC,wBAAwB;AAF1D;;;;AAIO,MAAM,OAAO,CAAA,GAAA,6NAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,kBAAkB;QAChB,SAAS;IACX;IACA,UAAU,CAAA,GAAA,2NAAA,CAAA,iBAAc,AAAD,EAAE,8HAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;AACF"}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file://D%3A/T3Stack/app_relawan/src/app/api/auth/%5B...all%5D/route.ts"],"sourcesContent":["import { auth } from \"~/lib/auth\"; // path to your auth file\r\nimport { toNextJsHandler } from \"better-auth/next-js\";\r\n\r\nexport const { POST, GET } = toNextJsHandler(auth);\r\n"],"names":[],"mappings":";;;;AAAA,uMAAmC,yBAAyB;AAC5D;;;AAEO,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAA,GAAA,kNAAA,CAAA,kBAAe,AAAD,EAAE,oHAAA,CAAA,OAAI"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}